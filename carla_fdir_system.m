function carla_fdir_system()
% CARLA_FDIR_SYSTEM - Fault Detection, Isolation, and Recovery Algorithm
% This script runs continuously, monitoring the global 'carla_outputs' 
% struct generated by the main receiver. It makes decisions about when to
% activate backup sensors or when to command a switch to safe mode.

    fprintf('FDIR System Started. Monitoring CARLA outputs...\n');
    
    % --- Configuration ---
    LOOP_RATE = 5; % Hz (check for new data 5 times per second)
    
    % --- State Tracking ---
    % Use a Map to track the health state of each primary sensor group.
    % State can be 'Nominal', 'Degraded_1' (1 backup used), 'Degraded_2', 'Failed'
    persistent sensor_states;
    if isempty(sensor_states)
        sensor_states = containers.Map('KeyType', 'char', 'ValueType', 'char');
    end

    % --- Main FDIR Loop ---
    while true % Run forever until manually stopped (Ctrl+C)
        
        % Access the global data structure populated by the receiver
        global carla_outputs;
        
        % Check if the data structure exists and is populated
        if ~isstruct(carla_outputs) || isempty(fieldnames(carla_outputs))
            pause(1/LOOP_RATE);
            continue;
        end
        
        % --- Decision Logic ---
        % Check for a fallback trigger from the main analysis function.
        if carla_outputs.fallback_initiation
            
            % Isolate the fault. Find out WHY the fallback was triggered.
            % We prioritize non-recoverable faults first.
            
            % --- PRIORITY 1: CRITICAL, NON-RECOVERABLE FAULTS ---
            if carla_outputs.sensor_fusion_status.position_uncertainty > 10 || ...
               isfield(carla_outputs.processed_sensor_data, 'is_collision_event') && carla_outputs.processed_sensor_data.is_collision_event
                
                % ACTION: Switch to Safe Mode Immediately
                command_switch_to_safe_mode("Critical system failure: High uncertainty or collision.");
                
                % After a critical failure, we might halt the FDIR or reset.
                % For this example, we'll stop the FDIR loop.
                fprintf('CRITICAL FAULT DETECTED. FDIR SYSTEM HALTED.\n');
                break;
            end
            
            % --- PRIORITY 2: RECOVERABLE SENSOR FAULTS ---
            if carla_outputs.sensor_fusion_status.health_score < 0.9 % A less strict threshold to catch single failures
                
                % ISOLATION: Find the specific faulty sensor group.
                raw_health = carla_outputs.sensor_fusion_status.raw_health;
                sensor_groups = fieldnames(raw_health);
                
                found_fault = false;
                for i = 1:numel(sensor_groups)
                    group_name = sensor_groups{i};
                    statuses = raw_health.(group_name);
                    
                    % Check if the primary sensor is down ('OK' is good)
                    if ~strcmp(statuses{1}, 'OK')
                        
                        % We have found a faulty primary sensor.
                        % Get the current recovery state of this sensor group.
                        current_state = get_sensor_state(sensor_states, group_name);
                        
                        % RECOVERY LOGIC:
                        switch current_state
                            case 'Nominal'
                                % First failure. Activate backup 1.
                                command_recover_sensor(group_name, 1);
                                sensor_states(group_name) = 'Degraded_1';
                                found_fault = true;
                                
                            case 'Degraded_1'
                                % Second failure. Activate backup 2.
                                command_recover_sensor(group_name, 2);
                                sensor_states(group_name) = 'Degraded_2';
                                found_fault = true;
                                
                            case 'Degraded_2'
                                % All backups have been used. This group has failed.
                                command_switch_to_safe_mode(sprintf("Unrecoverable failure in sensor group '%s'. All backups exhausted.", group_name));
                                sensor_states(group_name) = 'Failed';
                                found_fault = true;
                                
                            case 'Failed'
                                % Already marked as failed, do nothing.
                        end
                        
                        % If we've handled a fault, break the loop to process
                        % one fault per FDIR cycle.
                        if found_fault, break; end
                    end
                end
            end
        end
        
        pause(1 / LOOP_RATE);
    end
end

%% --- Helper Functions for FDIR ---

function state = get_sensor_state(state_map, sensor_name)
    % Safely get the current state of a sensor group from the map.
    % If a sensor has never failed, its state is 'Nominal'.
    if isKey(state_map, sensor_name)
        state = state_map(sensor_name);
    else
        state = 'Nominal';
    end
end

function command_recover_sensor(sensor_name, backup_level)
    % In a real system, this would send a command over a bus (e.g., CAN)
    % to the sensor controller to switch to a backup unit.
    % For our simulation, we just print a command to the console.
    fprintf('FDIR COMMAND: Recovering sensor group ''%s''. Activating backup #%d.\n', sensor_name, backup_level);
    
    % This function could be expanded to send a UDP message back to Python,
    % which would then programmatically "fix" the sensor in the simulation.
end

function command_switch_to_safe_mode(reason)
    % In a real system, this would send a high-priority command to the
    % vehicle's main computer to disengage autopilot and alert the driver.
    % For our simulation, we print a critical alert.
    fprintf('====================================================\n');
    fprintf('!!! FDIR CRITICAL ACTION: SWITCH TO SAFE MODE !!!\n');
    fprintf('!!! REASON: %s\n', reason);
    fprintf('====================================================\n');
    
    % This could also trigger an auditory warning:
    % beep; pause(0.1); beep; pause(0.1); beep;
end